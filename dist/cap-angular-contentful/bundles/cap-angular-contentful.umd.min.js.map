{"version":3,"sources":["ng://cap-angular-contentful/lib/services/config.service.ts","ng://cap-angular-contentful/lib/contentful.module.ts","ng://cap-angular-contentful/lib/services/contentful.service.ts"],"names":["ConfigService","data","this","space_id","environmet","delivery_accessToken","core","ɵɵinject","Object","factory","ɵfac","CapContentfulModule","forRoot","config","ngModule","providers","provide","useValue","imports","HttpClientModule","CommonModule","CapContentfulService","_http","credentials","httpOptions","headers","HttpHeaders","Authorization","Content-Type","observe","baseUrl","prototype","getItems","contentType","limit","skip","_this","_url","get","pipe","map","response","body","tap","catchError","error","handleError","getItemById","entryId","console","throwError","getElementsByContentType","getAsset","assetId","http","HttpClient","providedIn"],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { ConfigInterface } from '../interfaces/config.interface';\n\n@Injectable()\nexport class ConfigService {\n  space_id: string = '';\n  environmet: string = '';\n  delivery_accessToken: string = '';\n\n  constructor(@Inject(Object) private data: ConfigInterface) {\n    if (data) {\n      this.space_id = this.data.space_id;\n      this.environmet = this.data.environmet;\n      this.delivery_accessToken = this.data.delivery_accessToken;\n\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ConfigService } from './services/config.service';\nimport { ConfigInterface } from './interfaces/config.interface';\nimport { CommonModule } from \"@angular/common\";\n\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    HttpClientModule,\n    CommonModule,\n  ],\n  exports: [\n  ],\n  providers: [\n    ConfigService\n  ],\n  schemas: [\n  ]\n})\nexport class CapContentfulModule {\n  static forRoot(config: ConfigInterface): ModuleWithProviders {\n    return {\n      ngModule: CapContentfulModule,\n      providers: [\n        {\n          provide: ConfigService,\n          useValue: config\n        },\n      ]\n    };\n  }\n}\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { ConfigService } from './config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CapContentfulService {\n\n  private baseUrl: string;\n  private httpOptions: any;\n\n  constructor(\n    private _http: HttpClient,\n    private credentials: ConfigService) {\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${credentials.delivery_accessToken}`,\n        'Content-Type': 'application/vnd.contentful.delivery.v1+json'\n      }),\n      observe: \"response\"\n    };\n    this.baseUrl = `https://cdn.contentful.com/spaces/${this.credentials.space_id}/environments/${this.credentials.environmet}/`;\n  }\n\n\n  /**\n * Return the items related with a specific content type\n * @param contentType String\n * @param limit Optional(Number)\n * @param skip Optional(Number)\n*/\n  getItems(contentType: string, limit?: number, skip?: number): Observable<any> {\n    limit ? limit = limit : limit = 100;\n\n    const _url = `${this.baseUrl}entries?content_type=${contentType}&limit=${limit}&skip=${skip}`;\n    return this._http.get<any>(_url, this.httpOptions)\n      .pipe(\n        map((response: any) => response.body),\n        tap((response: any) => {\n\n          return response;\n        }),\n        catchError(error => this.handleError(error))\n      );\n  }\n\n  /**\n * Return a specific item by Id\n * @param entryId String\n*/\n  getItemById(entryId: string): Observable<any> {\n    let _url = `${this.baseUrl}entries/${entryId}`\n\n    return this._http.get<any>(_url, this.httpOptions)\n      .pipe(\n        map((response: any) => response.body),\n        tap((response: any) => response),\n        catchError(error => this.handleError(error))\n      );\n  }\n\n  private handleError(error: any) {\n    console.error(error);\n    return throwError(error || 'Server error');\n  }\n\n  /**\n * Return a list of items related with a specific content type\n * @param contentType String\n * @param limit Optional(Number)\n * @param skip Optional(Number)\n*/\n  getElementsByContentType(contentType: string, limit?: number, skip?: number) {\n    limit ? limit = limit : limit = 100;\n    let _url = `${this.baseUrl}entries?content_type=${contentType}&limit=${limit}&skip=${skip}`\n    return this._http.get<any>(_url, this.httpOptions)\n      .pipe(\n        map((response: any) => response.body),\n        tap((response: any) => response),\n        catchError(error => this.handleError(error))\n      );\n  }\n\n  /**\n * Return an item related with a specific assetId\n * @param assetId String\n*/\n  getAsset(assetId: string) {\n    let _url = `${this.baseUrl}assets/${assetId}`;\n\n    return this._http.get<any>(_url, this.httpOptions)\n      .pipe(\n        map((response: any) => response.body),\n        catchError(error => this.handleError(error))\n      );\n  }\n}\n"]}